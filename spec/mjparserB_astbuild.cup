
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:

	boolean errorDetected;

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



/* TERMINALS */

/* Key words */
terminal PROG, CONST, VOID, READ, PRINT, NEW, RETURN, RANGE, IF, ELSE, BREAK, CONTINUE, FOR, IN;
/* terminal NAMESPACE; */
/* terminal STATIC; */

/* Operators */
terminal ASSIGN, INC, DEC, PLUS, MINUS, MUL, DIV, MODULE;
terminal EQUALS, NOTEQUALS, GREATEREQ, GREATER, LESSEQ, LESS, LOGOR, LOGAND;

/* Control operators */
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN;
terminal SEMI, COMMA;
/* terminal COLON; */

/* Values*/
terminal Integer NUMBER;
terminal Integer BOOL;
terminal Character CHAR;
terminal String IDENT;

/* NONTERMINALS */
/* Grammar */
nonterminal Program Program; 
/* nonterminal Namespace; */
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal MethodDecl MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
/* nonterminal StaticInitializer */
nonterminal Statement Statement;
nonterminal FormPars FormPars;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term, Factor, Expr;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondFact, CondTerm;
nonterminal Relop Relop;
nonterminal ActPars ActPars;

/* Helper */
/* nonterminal NamespaceMul; */
nonterminal Decl Decl;
/* nonterminal DeclMul; */
nonterminal ProgramName ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorArrName;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclAssign ConstDeclAssign;
nonterminal rs.etf.pp1.symboltable.concepts.Struct TypeConst;
nonterminal VarDeclList VarDeclList;
nonterminal VarDeclaration VarDeclaration;
nonterminal VarDeclMul VarDeclMul;
nonterminal MethodDeclMul MethodDeclMul;
nonterminal StatementList StatementList;
nonterminal TypeVoid TypeVoid;
nonterminal FormParsMul FormParsMul;
nonterminal FormParsDecl FormParsDecl;
nonterminal FormParsList FormParsList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct AddTerm, MulFactor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ExprEpsilon;
nonterminal FactorSign FactorSign;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorOp;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal ForDecl ForDecl;
nonterminal DesStmtList DesStmtList;
nonterminal DesStmtMul DesStmtMul;
nonterminal rs.etf.pp1.symboltable.concepts.Struct OrCondTerm, AndCondFact, CondFactMay;
nonterminal ExprList ExprList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodCallName;
nonterminal ForStart ForStart;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ConditionListComp;
/* nonterminal DesignatorComma; */


precedence left ELSE;

/* Program 				::= (Program)						PROG ProgramName NamespaceMul Decl LBRACE MethodDeclMul RBRACE */
Program 				::= (Program)						PROG ProgramName:P1 Decl:D2 LBRACE MethodDeclMul:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :}	
							;

ProgramName				::=	(ProgramName)					IDENT:pName {: RESULT=new ProgramName(pName); RESULT.setLine(pNameleft); :}
							;
/*							
NamespaceMul			::= (NamespaceMulNamespace)			NamespaceMul Namespace
							|
							(NamespaceMulEpsilon)			
							;
							
Namespace				::= (Namespace)						NAMESPACE IDENT:namespaceName LBRACE Decl LBRACE MethodDeclMul RBRACE RBRACE
							;
	
*/

/*						
DeclMul					::= (DeclMulDecl)					DeclMul Decl
							|
							(DeclMulEpsilon)				
							;							

*/							
Decl					::= (DeclConst)						Decl:D1 ConstDecl:C2 {: RESULT=new DeclConst(D1, C2); RESULT.setLine(D1left); :}
							|
							(DeclVar)						Decl:D1 VarDecl:V2 {: RESULT=new DeclVar(D1, V2); RESULT.setLine(D1left); :}
							|
							(DeclEpsilon) {: RESULT=new DeclEpsilon(); :}					/* epsilon */
							/*
							|
							(DeclClass)						ClassDecl
							*/
							;	
						
ConstDecl				::= (ConstDeclNoErr)				CONST Type:vType ConstDeclAssign:C1 ConstDeclList:C2 SEMI {: RESULT=new ConstDeclNoErr(vType, C1, C2); RESULT.setLine(vTypeleft); :}
							|
							(ConstDeclErr)					CONST error:e SEMI
							{: parser.report_error("Handling error in definition of constant till ; in line " + eleft, null);  :} {: RESULT=new ConstDeclErr(); :}
							;		
																					
ConstDeclList			::= (ConstDeclListRep)				COMMA ConstDeclAssign:C1 ConstDeclList:C2 {: RESULT=new ConstDeclListRep(C1, C2); RESULT.setLine(C1left); :}
							|
							(ConstDeclListEmpty) {: RESULT=new ConstDeclListEmpty(); :}			/* epsilon */
							;		
															
ConstDeclAssign			::= (ConstDeclAssign)				IDENT:vName ASSIGN TypeConst:T1 {: RESULT=new ConstDeclAssign(vName, T1); RESULT.setLine(vNameleft); :}
							;
							
TypeConst 				::= (TypeConstNum)					NUMBER:constVal {: RESULT=new TypeConstNum(constVal); RESULT.setLine(constValleft); :}
							|
							(TypeConstChar)					CHAR:constVal {: RESULT=new TypeConstChar(constVal); RESULT.setLine(constValleft); :}
							|
							(TypeConstBool)					BOOL:constVal {: RESULT=new TypeConstBool(constVal); RESULT.setLine(constValleft); :}
							;

VarDeclMul				::= (VarDeclMulRep)					VarDeclMul:V1 VarDecl:V2 {: RESULT=new VarDeclMulRep(V1, V2); RESULT.setLine(V1left); :}
							|
							(VarDeclMulEpsilon) {: RESULT=new VarDeclMulEpsilon(); :}				/* epsilon */
							;
																					
VarDecl					::= (VarDeclNoErr)					Type:vType VarDeclaration:V1 VarDeclList:V2 SEMI {: RESULT=new VarDeclNoErr(vType, V1, V2); RESULT.setLine(vTypeleft); :}
							|
							(VarDeclErr)					error:e SEMI
							{: parser.report_error("Handling error in declaration of variable till ; in line " + eleft, null);  :} {: RESULT=new VarDeclErr(); :}
							;
							
							
VarDeclList				::= (VarDeclListRep)				COMMA VarDeclaration:V1 VarDeclList:V2 {: RESULT=new VarDeclListRep(V1, V2); RESULT.setLine(V1left); :}
							|
							(VarDeclListEpsilon) {: RESULT=new VarDeclListEpsilon(); :}			/* epsilon */
							;
										
VarDeclaration			::= (VarDeclarationVar)				IDENT:varName {: RESULT=new VarDeclarationVar(varName); RESULT.setLine(varNameleft); :}
							|
							(VarDeclarationArr)				IDENT:arrName LBRACKET RBRACKET {: RESULT=new VarDeclarationArr(arrName); RESULT.setLine(arrNameleft); :}
							;
							
/*
Class Declarations 

StaticInitializer		::= (StaticInitializer)				STATIC LBRACE StatementList RBRACE
							;
*/

							
StatementList			::=	(StmtListStmt)					StatementList:S1 Statement:S2 {: RESULT=new StmtListStmt(S1, S2); RESULT.setLine(S1left); :}
							|
							(StmtListEps) {: RESULT=new StmtListEps(); :}					/* epsilon */
							;

MethodDeclMul			::= (MethodDeclMulRep)				MethodDeclMul:M1 MethodDecl:M2 {: RESULT=new MethodDeclMulRep(M1, M2); RESULT.setLine(M1left); :}
							|
							(MethodDeclMulEpsilon) {: RESULT=new MethodDeclMulEpsilon(); :}			/* epsilon */
							;
							
MethodDecl				::= (MethodDecl)					TypeVoid:T1 MethodName:M2 LPAREN FormPars:F3 VarDeclMul:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDecl(T1, M2, F3, V4, S5); RESULT.setLine(T1left); :}
							;
							
							
MethodName				::= (MethodName)					IDENT:mName {: RESULT=new MethodName(mName); RESULT.setLine(mNameleft); :}
							;
							
TypeVoid				::=	(TypeVoidType)					Type:vType {: RESULT=new TypeVoidType(vType); RESULT.setLine(vTypeleft); :}
							|
							(TypeVoidVoid)					VOID {: RESULT=new TypeVoidVoid(); :}
							;

FormPars				::= (FormParsPars)					FormParsList:F1 {: RESULT=new FormParsPars(F1); RESULT.setLine(F1left); :}
							|
							(FormParsEpsilon)				RPAREN {: RESULT=new FormParsEpsilon(); :};
							
FormParsList			::= (FormParsMany)					FormParsMul:F1 FormParsList:F2 {: RESULT=new FormParsMany(F1, F2); RESULT.setLine(F1left); :}
							|
							(FormParsOne)					FormParsDecl:F1 {: RESULT=new FormParsOne(F1); RESULT.setLine(F1left); :}
							;		 			

FormParsMul				::= (FormParsMulRep)				Type:vType IDENT:vName COMMA {: RESULT=new FormParsMulRep(vType, vName); RESULT.setLine(vTypeleft); :} 
							|
							(FormParsMulArr)				Type:vType IDENT:vName LBRACKET RBRACKET COMMA {: RESULT=new FormParsMulArr(vType, vName); RESULT.setLine(vTypeleft); :}
							|
							(FormParsMulErr)				error COMMA:e
							{: parser.report_error("Handling error in declaration of formal parameters till COMMA in line " + eleft, null);  :} {: RESULT=new FormParsMulErr(); :}
							;

FormParsDecl			::= (FormsParsDeclVar)				Type:vType IDENT:vName RPAREN {: RESULT=new FormsParsDeclVar(vType, vName); RESULT.setLine(vTypeleft); :}
							|
							(FormsParsDeclArr)				Type:vType IDENT:vName LBRACKET RBRACKET RPAREN {: RESULT=new FormsParsDeclArr(vType, vName); RESULT.setLine(vTypeleft); :}
							|
							(FormParsDeclErr)				error RPAREN:e
							{: parser.report_error("Handling error in declaration of formal parameters till PAREN in line " + eleft, null);  :} {: RESULT=new FormParsDeclErr(); :}
							;
							
Type					::= (Type)							IDENT:tName {: RESULT=new Type(tName); RESULT.setLine(tNameleft); :}
							/* 
							|
							(TypeNamespace)					IDENT:nName COLON COLON IDENT:tName 
							*/
							;
							
Statement				::= (StatementMatched)				Matched:M1 {: RESULT=new StatementMatched(M1); RESULT.setLine(M1left); :}
							|
							(StatementUnmatched)			Unmatched:U1 {: RESULT=new StatementUnmatched(U1); RESULT.setLine(U1left); :}
							;

Matched					::= (StmtDesignatorStmt)			DesignatorStatement:des SEMI {: RESULT=new StmtDesignatorStmt(des); RESULT.setLine(desleft); :}
							|
							(StmtRead)						READ LPAREN Designator:des RPAREN SEMI {: RESULT=new StmtRead(des); RESULT.setLine(desleft); :}
							|
							(StmtPrintExpr)					PRINT LPAREN Expr:expr RPAREN SEMI {: RESULT=new StmtPrintExpr(expr); RESULT.setLine(exprleft); :}
							|
							(StmtPrintNum)					PRINT LPAREN Expr:expr COMMA NUMBER:num RPAREN SEMI {: RESULT=new StmtPrintNum(expr, num); RESULT.setLine(exprleft); :}
							|
							(StmtRet)						RETURN ExprEpsilon:expr SEMI {: RESULT=new StmtRet(expr); RESULT.setLine(exprleft); :}
							|
							(StmtMatched)					IF LPAREN Condition:cond Matched:match ELSE Matched:unmatch {: RESULT=new StmtMatched(cond, match, unmatch); RESULT.setLine(condleft); :}
							|
							(StmtBreak) 					BREAK SEMI {: RESULT=new StmtBreak(); :}
							|
							(StmtContinue)					CONTINUE SEMI {: RESULT=new StmtContinue(); :}
							|
							(StmtFor)						ForStart:F1 LPAREN ForDecl:F2 RPAREN Matched:M3 {: RESULT=new StmtFor(F1, F2, M3); RESULT.setLine(F1left); :}
							|
							(StmtStmt)						LBRACE StatementList:S1 RBRACE {: RESULT=new StmtStmt(S1); RESULT.setLine(S1left); :}
							;
							
ForStart				::= (ForStart)						FOR {: RESULT=new ForStart(); :}
							;							

Unmatched				::= (UnmatchedIf)					IF LPAREN Condition:cond Statement:stmt {: RESULT=new UnmatchedIf(cond, stmt); RESULT.setLine(condleft); :}
							|
							(UnmatchedIfElse)				IF LPAREN Condition:cond Matched:match ELSE Unmatched:unmatch {: RESULT=new UnmatchedIfElse(cond, match, unmatch); RESULT.setLine(condleft); :}				
							;

Condition				::= (ConditionNoErr)				CondTerm:ct OrCondTerm:O1 RPAREN {: RESULT=new ConditionNoErr(ct, O1); RESULT.setLine(ctleft); :}
							|
							(ConditionErr)					error:e RPAREN
							{: parser.report_error("Handling error in if condition till PAREN in line " + eleft, null);  :} {: RESULT=new ConditionErr(); :}
							;

OrCondTerm				::= (OrCondTermOr)					OrCondTerm:O1 LOGOR CondTerm:ct {: RESULT=new OrCondTermOr(O1, ct); RESULT.setLine(O1left); :}
							|
							(OrCondTermEpsilon) {: RESULT=new OrCondTermEpsilon(); :}				/* epsilon */
							;

CondTerm				::= (CondTerm)						CondFact:cf AndCondFact:A1 {: RESULT=new CondTerm(cf, A1); RESULT.setLine(cfleft); :}
							;		

AndCondFact				::= (AndCondFactAnd)				AndCondFact:A1	LOGAND CondFact:cf {: RESULT=new AndCondFactAnd(A1, cf); RESULT.setLine(A1left); :}
							|
							(AndCondFactEpsilon) {: RESULT=new AndCondFactEpsilon(); :}			/* epsilon */
							;

CondFact				::= (CondFactExpr)					Expr:e {: RESULT=new CondFactExpr(e); RESULT.setLine(eleft); :}
							|
							(CondFactRelop)					Expr:e Relop:R1 Expr:re {: RESULT=new CondFactRelop(e, R1, re); RESULT.setLine(eleft); :}
							;

CondFactMay				::= (CondFactMayCond)				CondFact:C1 {: RESULT=new CondFactMayCond(C1); RESULT.setLine(C1left); :}
							|
							(ConfFactMayEpsilon) {: RESULT=new ConfFactMayEpsilon(); :}			/* epsilon */
							;							

ForDecl					::= (ForDecl)						DesStmtList:D1 SEMI CondFactMay:C2 SEMI DesStmtList:D3 {: RESULT=new ForDecl(D1, C2, D3); RESULT.setLine(D1left); :}
							;

DesStmtList				::= (DesStmtListDes)				DesignatorStatement:D1 DesStmtMul:D2 {: RESULT=new DesStmtListDes(D1, D2); RESULT.setLine(D1left); :}
							|
							(DesStmtListEpsilon) {: RESULT=new DesStmtListEpsilon(); :}			/* epsilon */
							;

DesStmtMul				::= (DesStmtMulRep)					COMMA DesignatorStatement:D1 DesStmtMul:D2 {: RESULT=new DesStmtMulRep(D1, D2); RESULT.setLine(D1left); :}
							|
							(DesStmtMulEpsilon) {: RESULT=new DesStmtMulEpsilon(); :}				/* epsilon */
							;
							
ExprEpsilon				::= (ExprEpsilonExpr)				Expr:expr {: RESULT=new ExprEpsilonExpr(expr); RESULT.setLine(exprleft); :}
							|
							(ExprEpsilonEpsilon) {: RESULT=new ExprEpsilonEpsilon(); :}			/* epsilon */
							;
							
							
DesignatorStatement		::= (DStmtDesAExpr)					Designator:des ASSIGN Expr:expr {: RESULT=new DStmtDesAExpr(des, expr); RESULT.setLine(desleft); :}
							|
							(DStmtDesInc)					Designator:des INC {: RESULT=new DStmtDesInc(des); RESULT.setLine(desleft); :}
							|
							(DStmtDesDec)					Designator:des DEC {: RESULT=new DStmtDesDec(des); RESULT.setLine(desleft); :}
							|
							(DStmtDesMeth)					MethodCallName:M1 LPAREN ActPars:actPars RPAREN {: RESULT=new DStmtDesMeth(M1, actPars); RESULT.setLine(M1left); :}
							|
							(DStmtListComp)					Designator:des ASSIGN LBRACKET FOR Expr:expr IN Designator:desIn RBRACKET {: RESULT=new DStmtListComp(des, expr, desIn); RESULT.setLine(desleft); :}
							|
							(DStmtListCompIf)				Designator:des ASSIGN LBRACKET FOR Expr:expr IN Designator:desIn IF ConditionListComp:C1 {: RESULT=new DStmtListCompIf(des, expr, desIn, C1); RESULT.setLine(desleft); :} 
							/*
							|
							(DStmtArrayUnpack)				LBRACKET DesignatorComma MUL Designator RBRACKET ASSIGN Designator
							*/
							;
							
ConditionListComp		::= (ConditionListCompNoErr)		CondTerm:ct OrCondTerm:O1 RBRACKET {: RESULT=new ConditionListCompNoErr(ct, O1); RESULT.setLine(ctleft); :}
							|
							(ConditionListCompErr)			error:e RBRACKET
							{: parser.report_error("Handling error in if condition till BRACKET in line " + eleft, null);  :} {: RESULT=new ConditionListCompErr(); :}
							;
									
MethodCallName			::= (MethodCallName)				Designator:des {: RESULT=new MethodCallName(des); RESULT.setLine(desleft); :}
							;

ActPars					::= (ActParsExpr)					ExprList:exprList Expr:expr {: RESULT=new ActParsExpr(exprList, expr); RESULT.setLine(exprListleft); :} 
							|
							(ActParsEpsilon) {: RESULT=new ActParsEpsilon(); :}				/* epsilon */
							;

ExprList				::= (ExprListExpr)					ExprList:exprList Expr:expr COMMA {: RESULT=new ExprListExpr(exprList, expr); RESULT.setLine(exprListleft); :}
							|
							(ExprListEpsilon) {: RESULT=new ExprListEpsilon(); :}				/* epsilon */
							;

/*
DesignatorComma			::= (DesignatorCommaDes)			DesignatorComma Designator COMMA
							|
							(DesignatorCommaComma)			DesignatorComma COMMA
							|
							(DesignatorCommaEpsilon)		
							;
*/						
					
Designator 				::= (DesignatorVar)					IDENT:desName {: RESULT=new DesignatorVar(desName); RESULT.setLine(desNameleft); :} 
							|
							(DesignatorArr)					DesignatorArrName:desArrName LBRACKET Expr:expr RBRACKET {: RESULT=new DesignatorArr(desArrName, expr); RESULT.setLine(desArrNameleft); :}
							/* 
							|
							(DesignatorNamespaceVar)		IDENT:nName COLON COLON IDENT:dName 
							|
							(DesignatorNamespaceArr)		IDENT:nName COLON COLON DesignatorArrName:dArrName LBRACKET Expr:e RBRACKET 
							*/
							;
							
DesignatorArrName		::= (DesignatorArrName)				IDENT:desArrName {: RESULT=new DesignatorArrName(desArrName); RESULT.setLine(desArrNameleft); :}
							;							
							
Expr					::= (Expr)							Term:term AddTerm:addTerm {: RESULT=new Expr(term, addTerm); RESULT.setLine(termleft); :}
							;
					
AddTerm					::= (AddTermTerm)					AddTerm:addTerm Addop:A1 Term:term {: RESULT=new AddTermTerm(addTerm, A1, term); RESULT.setLine(addTermleft); :}
							|
							(AddTermEpsilon) {: RESULT=new AddTermEpsilon(); :}				/* epsilon */
							;
							
Term					::= (Term)							Factor:factor MulFactor:mulFactor {: RESULT=new Term(factor, mulFactor); RESULT.setLine(factorleft); :}
							;
							
							
MulFactor				::= (MulFactorFactor)				MulFactor:mulFactor Mulop:M1 Factor:factor {: RESULT=new MulFactorFactor(mulFactor, M1, factor); RESULT.setLine(mulFactorleft); :}
							|
							(MulFactorEpsilon) {: RESULT=new MulFactorEpsilon(); :}				/* epsilon */
							;
	
Factor					::=	(Factor)						FactorSign:sign FactorOp:factor {: RESULT=new Factor(sign, factor); RESULT.setLine(signleft); :}					
							;
							
FactorSign				::=	(FactorSignMinus)				MINUS {: RESULT=new FactorSignMinus(); :} 
							|
							(FactorSignPlus) {: RESULT=new FactorSignPlus(); :}				/* epsilon */
							;
						
FactorOp				::= (FactorOpChar)					CHAR:factVal {: RESULT=new FactorOpChar(factVal); RESULT.setLine(factValleft); :}
							|
							(FactorOpNumber)				NUMBER:factVal {: RESULT=new FactorOpNumber(factVal); RESULT.setLine(factValleft); :}
							|
							(FactorOpBool)					BOOL:factVal {: RESULT=new FactorOpBool(factVal); RESULT.setLine(factValleft); :}
							|
							(FactorOpExpr)					LPAREN Expr:e RPAREN {: RESULT=new FactorOpExpr(e); RESULT.setLine(eleft); :}
							|
							(FactorOpDesignator)			Designator:des {: RESULT=new FactorOpDesignator(des); RESULT.setLine(desleft); :}
							|
							(FactorOpNew)					NEW Type:nType LBRACKET Expr:expr RBRACKET {: RESULT=new FactorOpNew(nType, expr); RESULT.setLine(nTypeleft); :}
							|
							(FactorOpRange)					RANGE LPAREN Expr:expr RPAREN {: RESULT=new FactorOpRange(expr); RESULT.setLine(exprleft); :}
							|
							(FactorOpMethCall)				MethodCallName:M1 LPAREN ActPars:actPars RPAREN {: RESULT=new FactorOpMethCall(M1, actPars); RESULT.setLine(M1left); :}
							;
							
Addop					::= (AddopPlus)						PLUS {: RESULT=new AddopPlus(); :}
							|
							(AddopMinus)					MINUS {: RESULT=new AddopMinus(); :}
							;
						
Mulop					::= (MulopMul)						MUL {: RESULT=new MulopMul(); :}
							|
							(MulopDiv)						DIV {: RESULT=new MulopDiv(); :}
							|
							(MulopMod)						MODULE {: RESULT=new MulopMod(); :}
							;
							
Relop					::= (RelopEquals)					EQUALS {: RESULT=new RelopEquals(); :}
							|
							(RelopNotEquals)				NOTEQUALS {: RESULT=new RelopNotEquals(); :}
							|
							(RelopGreaterEq)				GREATEREQ {: RESULT=new RelopGreaterEq(); :}
							|
							(RelopGreater)					GREATER {: RESULT=new RelopGreater(); :}
							|
							(RelopLessEq)					LESSEQ {: RESULT=new RelopLessEq(); :}
							|
							(RelopLess)						LESS {: RESULT=new RelopLess(); :}
							;
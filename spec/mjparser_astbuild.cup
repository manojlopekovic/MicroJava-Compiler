
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:

	boolean errorDetected;

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* TERMINALS */

/* Key words */
terminal PROG, CONST, VOID, READ, PRINT, NEW, RETURN, RANGE;
/* terminal NAMESPACE; */
/* terminal STATIC; */

/* Operators */
terminal ASSIGN, INC, DEC, PLUS, MINUS, MUL, DIV, MODULE;

/* Control operators */
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN;
terminal SEMI, COMMA;
terminal COLON;

/* Values*/
terminal Integer NUMBER;
terminal Integer BOOL;
terminal Character CHAR;
terminal String IDENT;

/* NONTERMINALS */
/* Grammar */
nonterminal Program Program; 
/* nonterminal Namespace; */
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal MethodDecl MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
/* nonterminal StaticInitializer */
nonterminal Statement Statement;
nonterminal FormPars FormPars;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor, Expr, Term;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;

/* Helper */
/* nonterminal NamespaceMul; */
nonterminal Decl Decl;
/* nonterminal DeclMul; */
nonterminal ProgramName ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclAssign ConstDeclAssign;
nonterminal rs.etf.pp1.symboltable.concepts.Struct TypeConst;
nonterminal VarDeclList VarDeclList;
nonterminal VarDeclaration VarDeclaration;
nonterminal VarDeclMul VarDeclMul;
nonterminal MethodDeclMul MethodDeclMul;
nonterminal StatementList StatementList;
nonterminal TypeVoid TypeVoid;
nonterminal FormParsMul FormParsMul;
nonterminal FormParsDecl FormParsDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorOp, ExprEpsilon, AddTerm, MulFactor;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorArrName;
nonterminal FactorSign FactorSign;



/* Program 				::= (Program)						PROG ProgramName NamespaceMul Decl LBRACE MethodDeclMul RBRACE */
Program 				::= (Program)						PROG ProgramName:P1 Decl:D2 LBRACE MethodDeclMul:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :}	
							;

ProgramName				::=	(ProgramName)					IDENT:pName {: RESULT=new ProgramName(pName); RESULT.setLine(pNameleft); :}
							;
/*							
NamespaceMul			::= (NamespaceMulNamespace)			NamespaceMul Namespace
							|
							(NamespaceMulEpsilon)			
							;
							
Namespace				::= (Namespace)						NAMESPACE IDENT:namespaceName LBRACE Decl LBRACE MethodDeclMul RBRACE RBRACE
							;
	
*/

/*						
DeclMul					::= (DeclMulDecl)					DeclMul Decl
							|
							(DeclMulEpsilon)				
							;							

*/							
Decl					::= (DeclConst)						Decl:D1 ConstDecl:C2 {: RESULT=new DeclConst(D1, C2); RESULT.setLine(D1left); :}
							|
							(DeclVar)						Decl:D1 VarDecl:V2 {: RESULT=new DeclVar(D1, V2); RESULT.setLine(D1left); :}
							|
							(DeclEpsilon) {: RESULT=new DeclEpsilon(); :}					/* epsilon */
							/*
							|
							(DeclClass)						ClassDecl
							*/
							;	
						
ConstDecl				::= (ConstDeclNoErr)				CONST Type:vType ConstDeclAssign:C1 ConstDeclList:C2 SEMI {: RESULT=new ConstDeclNoErr(vType, C1, C2); RESULT.setLine(vTypeleft); :}
							|
							(ConstDeclErr)					CONST error:e SEMI
							{: parser.report_error("Handling error in definition of constant till ; in line " + eleft, null);  :} {: RESULT=new ConstDeclErr(); :}
							;		
																					
ConstDeclList			::= (ConstDeclListRep)				COMMA ConstDeclAssign:C1 ConstDeclList:C2 {: RESULT=new ConstDeclListRep(C1, C2); RESULT.setLine(C1left); :}
							|
							(ConstDeclListEmpty) {: RESULT=new ConstDeclListEmpty(); :}			/* epsilon */
							;		
															
ConstDeclAssign			::= (ConstDeclAssign)				IDENT:vName ASSIGN TypeConst:T1 {: RESULT=new ConstDeclAssign(vName, T1); RESULT.setLine(vNameleft); :}
							;
							
TypeConst 				::= (TypeConstNum)					NUMBER:constVal {: RESULT=new TypeConstNum(constVal); RESULT.setLine(constValleft); :}
							|
							(TypeConstChar)					CHAR:constVal {: RESULT=new TypeConstChar(constVal); RESULT.setLine(constValleft); :}
							|
							(TypeConstBool)					BOOL:constVal {: RESULT=new TypeConstBool(constVal); RESULT.setLine(constValleft); :}
							;

VarDeclMul				::= (VarDeclMulRep)					VarDeclMul:V1 VarDecl:V2 {: RESULT=new VarDeclMulRep(V1, V2); RESULT.setLine(V1left); :}
							|
							(VarDeclMulEpsilon) {: RESULT=new VarDeclMulEpsilon(); :}				/* epsilon */
							;
																					
VarDecl					::= (VarDeclNoErr)					Type:vType VarDeclaration:V1 VarDeclList:V2 SEMI {: RESULT=new VarDeclNoErr(vType, V1, V2); RESULT.setLine(vTypeleft); :}
							|
							(VarDeclErr)					error:e SEMI
							{: parser.report_error("Handling error in declaration of variable till ; in line " + eleft, null);  :} {: RESULT=new VarDeclErr(); :}
							;
							
							
VarDeclList				::= (VarDeclListRep)				COMMA VarDeclaration:V1 VarDeclList:V2 {: RESULT=new VarDeclListRep(V1, V2); RESULT.setLine(V1left); :}
							|
							(VarDeclListEpsilon) {: RESULT=new VarDeclListEpsilon(); :}			/* epsilon */
							;
										
VarDeclaration			::= (VarDeclarationVar)				IDENT:vName {: RESULT=new VarDeclarationVar(vName); RESULT.setLine(vNameleft); :}
							|
							(VarDeclarationArray)			IDENT:arrName LBRACKET RBRACKET {: RESULT=new VarDeclarationArray(arrName); RESULT.setLine(arrNameleft); :}
							;
							
/*
Class Declarations 

StaticInitializer		::= (StaticInitializer)				STATIC LBRACE StatementList RBRACE
							;
*/

							
StatementList			::=	(StmtListStmt)					StatementList:S1 Statement:S2 {: RESULT=new StmtListStmt(S1, S2); RESULT.setLine(S1left); :}
							|
							(StmtListEps) {: RESULT=new StmtListEps(); :}					/* epsilon */
							;

MethodDeclMul			::= (MethodDeclMulRep)				MethodDeclMul:M1 MethodDecl:M2 {: RESULT=new MethodDeclMulRep(M1, M2); RESULT.setLine(M1left); :}
							|
							(MethodDeclMulEpsilon) {: RESULT=new MethodDeclMulEpsilon(); :}			/* epsilon */
							;
							
MethodDecl				::= (MethodDecl)					TypeVoid:T1 MethodName:M2 LPAREN FormPars:F3 RPAREN VarDeclMul:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDecl(T1, M2, F3, V4, S5); RESULT.setLine(T1left); :}
							;
							
MethodName				::= (MethodName)					IDENT:mName {: RESULT=new MethodName(mName); RESULT.setLine(mNameleft); :}
							;
							
TypeVoid				::=	(TypeVoidType)					Type:vType {: RESULT=new TypeVoidType(vType); RESULT.setLine(vTypeleft); :}
							|
							(TypeVoidVoid)					VOID {: RESULT=new TypeVoidVoid(); :}
							;

FormPars				::= (FormParsPars)					FormParsDecl:F1 FormParsMul:F2 {: RESULT=new FormParsPars(F1, F2); RESULT.setLine(F1left); :}
							|
							(FormParsEpsilon) {: RESULT=new FormParsEpsilon(); :}				/* epsilon */
							;

FormParsMul				::= (FormParsMulRep)				COMMA FormParsDecl:F1 FormParsMul:F2 {: RESULT=new FormParsMulRep(F1, F2); RESULT.setLine(F1left); :}
							|
							(FormParsMulEpsilon) {: RESULT=new FormParsMulEpsilon(); :}			/* epsilon */	
							;

FormParsDecl			::= (FormsParsDeclVar)				Type:vType IDENT:vName {: RESULT=new FormsParsDeclVar(vType, vName); RESULT.setLine(vTypeleft); :}
							|
							(FormsParsDeclArr)				Type:vType IDENT:vName LBRACKET RBRACKET {: RESULT=new FormsParsDeclArr(vType, vName); RESULT.setLine(vTypeleft); :}
							;
							
Type					::= (Type)							IDENT:tName {: RESULT=new Type(tName); RESULT.setLine(tNameleft); :}
							/* 
							|
							(TypeNamespace)					IDENT:nName COLON COLON IDENT:tName 
							*/
							;

						
Statement				::= (StmtDesignatorStmt)			DesignatorStatement:des SEMI {: RESULT=new StmtDesignatorStmt(des); RESULT.setLine(desleft); :}
							|
							(StmtRead)						READ LPAREN Designator:des RPAREN SEMI {: RESULT=new StmtRead(des); RESULT.setLine(desleft); :}
							|
							(StmtPrintExpr)					PRINT LPAREN Expr:e RPAREN SEMI {: RESULT=new StmtPrintExpr(e); RESULT.setLine(eleft); :}
							|
							(StmtPrintNum)					PRINT LPAREN Expr:e COMMA NUMBER:num RPAREN SEMI {: RESULT=new StmtPrintNum(e, num); RESULT.setLine(eleft); :}
							|
							(StmtRet)						RETURN ExprEpsilon:e SEMI {: RESULT=new StmtRet(e); RESULT.setLine(eleft); :}
							;
							
ExprEpsilon				::= (ExprEpsilonExpr)				Expr:e {: RESULT=new ExprEpsilonExpr(e); RESULT.setLine(eleft); :}
							|
							(ExprEpsilonEpsilon) {: RESULT=new ExprEpsilonEpsilon(); :}			/* epsilon */
							;
							
DesignatorStatement		::= (DStmtDesAExpr)					Designator:des ASSIGN Expr:e {: RESULT=new DStmtDesAExpr(des, e); RESULT.setLine(desleft); :}
							|
							(DStmtDesInc)					Designator:des INC {: RESULT=new DStmtDesInc(des); RESULT.setLine(desleft); :}
							|
							(DStmtDesDec)					Designator:des DEC {: RESULT=new DStmtDesDec(des); RESULT.setLine(desleft); :}
							;
					
Designator 				::= (DesignatorVar)					IDENT:dName {: RESULT=new DesignatorVar(dName); RESULT.setLine(dNameleft); :} 
							|
							(DesignatorArr)					DesignatorArrName:dArrName LBRACKET Expr:e RBRACKET {: RESULT=new DesignatorArr(dArrName, e); RESULT.setLine(dArrNameleft); :}
							/* 
							|
							(DesignatorNamespaceVar)		IDENT:nName COLON COLON IDENT:dName 
							|
							(DesignatorNamespaceArr)		IDENT:nName COLON COLON DesignatorArrName:dArrName LBRACKET Expr:e RBRACKET 
							*/
							;
							
DesignatorArrName		::= (DesignatorArrName)				IDENT:dName {: RESULT=new DesignatorArrName(dName); RESULT.setLine(dNameleft); :}
							;							
							
Expr					::= (Expr)							Term:t AddTerm:at {: RESULT=new Expr(t, at); RESULT.setLine(tleft); :}
							;
					
AddTerm					::= (AddTermTerm)					AddTerm:A1 Addop:A2 Term:t {: RESULT=new AddTermTerm(A1, A2, t); RESULT.setLine(A1left); :}
							|
							(AddTermEpsilon) {: RESULT=new AddTermEpsilon(); :}				/* epsilon */
							;
							
Term					::= (Term)							Factor:F1 MulFactor:mf {: RESULT=new Term(F1, mf); RESULT.setLine(F1left); :}
							;
												
MulFactor				::= (MulFactorFactor)				MulFactor:M1 Mulop:M2 Factor:F3 {: RESULT=new MulFactorFactor(M1, M2, F3); RESULT.setLine(M1left); :}
							|
							(MulFactorEpsilon) {: RESULT=new MulFactorEpsilon(); :}				/* epsilon */
							;
	
Factor					::= (Factor)						FactorSign:F1 FactorOp:F2 {: RESULT=new Factor(F1, F2); RESULT.setLine(F1left); :}
							;	
	
FactorSign				::= (FactorSignMinus)				MINUS {: RESULT=new FactorSignMinus(); :} 
							|
							(FactorSignPlus) {: RESULT=new FactorSignPlus(); :}				/* epsilon */
							;
						
FactorOp				::= (FactorOpChar) 					CHAR:factVal {: RESULT=new FactorOpChar(factVal); RESULT.setLine(factValleft); :}
							|
							(FactorOpNumber)				NUMBER:factVal {: RESULT=new FactorOpNumber(factVal); RESULT.setLine(factValleft); :}
							|
							(FactorOpBool)					BOOL:factVal {: RESULT=new FactorOpBool(factVal); RESULT.setLine(factValleft); :}
							|
							(FactorOpExpr)					LPAREN Expr:e RPAREN {: RESULT=new FactorOpExpr(e); RESULT.setLine(eleft); :}
							|
							(FactorOpDesignator)			Designator:des {: RESULT=new FactorOpDesignator(des); RESULT.setLine(desleft); :}
							|
							(FactorOpNew)					NEW Type:nType LBRACKET Expr:e RBRACKET {: RESULT=new FactorOpNew(nType, e); RESULT.setLine(nTypeleft); :}
							|
							(FactorOpRange)					RANGE LPAREN Expr:e RPAREN {: RESULT=new FactorOpRange(e); RESULT.setLine(eleft); :}
							;

							
Addop					::= (AddopPlus)						PLUS {: RESULT=new AddopPlus(); :}
							|
							(AddopMinus)					MINUS {: RESULT=new AddopMinus(); :}
							;
						
Mulop					::= (MulopMul)						MUL {: RESULT=new MulopMul(); :}
							|
							(MulopDiv)						DIV {: RESULT=new MulopDiv(); :}
							|
							(MulopMod)						MODULE {: RESULT=new MulopMod(); :}
							;